#!/usr/bin/python

#############################################################################
# Script that parses output file from HaploReg tool (v2)
# and saves data in GARLIC DB
#
# Brief instructions: 
# - After providing a list of GWAS SNPs as input to HaploReg,
# - Select all output generated by HaploReg either using a mouse or CTRL+a 
# (but make sure your browser window is active)
# - copy all contents using either CTRL+c or right mouse-click
# - Save the file as my_LD_file.txt
#############################################################################

from mySQLConnect import mysql_connect
import MySQLdb as mdb
import sys
import csv
import re

con=mysql_connect()
cursor=con.cursor()

def load_haploreg(haploreg_input):

    k=0
    read_line= []
    row_el= []

    f=open(haploreg_input, 'r')
    lines = f.readlines()

    k=0
    j=0
    curr_leader_name=''
    curr_leader_id=0
    leader_flag=0
    follower_flag=0

    #chr_id=0
    chr_pos=0
    #current_disease=''
    leader=''
    mapped_gene=''
    r2=0
    d=0
    ref=''
    alt=''
    AFR=0
    AMR=0
    ASN=0
    EUR=0

    i=0
    for i in range (0, len(lines)):
        #...read line by line from  Haploreg file...
        line = lines[i]
        line = line.strip()
        #Find SNP leader 
        rex_leader = re.match(r"Query SNP:\s+(rs\d+)\s+",line)
        #Find SNP follower    
        rex_follower = re.match(r"^func\s+annot",line)
        
        # New leader
        if rex_leader and leader_flag==0: #New leader 
            leader_flag=1
            print "Leader:", rex_leader.group(1)
            curr_leader_name = rex_leader.group(1).strip()
            #get leader id
            rex_leader_id=cursor.execute("SELECT id FROM snps WHERE name=%s" % curr_leader_name);
            curr_leader_id = cursor.fetchone()[0]
                
            k=k+1
                
        elif rex_follower and follower_flag==0: 
            # Start of the following SNP block
            while(1):            
                i+=1
                if(i+1)<=len(lines):
                    line = lines[i]
                else:
                    break
                        
                rex_new=re.match(r"([\w]{1,2})\s+(\d+)\s+([-\d\.]+)\s+([-\d\.]+)\s+(rs\d+)\s+([,ACTG?]+|\d+-mer)\s+([,ACTG?|\d+-mer]+)\s+([\d\.]+)\s+([\d\.]+)\s+([\d\.]+)\s+([\d\.]+)",line)
             
                if rex_new: 
                    chr_id=rex_new.group(1)
                    chr_pos=int(rex_new.group(2))
                    curr_snp_name=rex_new.group(5)

                    r2=rex_new.group(3)
                    d=rex_new.group(4)
                    ref=rex_new.group(6)
                    alt=rex_new.group(7)
                    AFR=float(rex_new.group(8))
                    AMR=float(rex_new.group(9))
                    ASN=float(rex_new.group(10))
                    EUR=float(rex_new.group(11))

                    if chr_id:
                        if chr_id is 'x' or chr_id is 'X':
                            chr_id=int(23)
                        elif chr_id == 'y' or chr_id == 'Y':
                            chr_id=int(24)
                    else:
                        chr_id=int(0)
    
                    # Check whether leader == folower
                    if curr_leader_name == curr_snp_name:
                        print "Leader among followers", curr_snp_name, "updating..."
                        cursor.execute("UPDATE leaders SET chr_id=%s, chr_pos=%s, r2=%s, d=%s, ref=%s, alt=%s, AFR=%s, AMR=%s, ASN=%s, EUR=%s WHERE snp_id=%s", (chr_id, chr_pos, r2, d, ref, alt, AFR, AMR, ASN, EUR, curr_leader_id));
                        cursor.execute("UPDATE leader_diseases SET chr_id=%s WHERE snp_id=%s", (chr_id, curr_leader_id))
                        con.commit()

                        k+=1
                    else:
                        #First check whether snp_id belnogs to any of tables LEADERS of FOLLOWERS
                        l_flag=0
                        rex_exist=cursor.execute("SELECT id, leader FROM snps WHERE name=%s" % curr_snp_name);
                        #Create new entries for followers in table FOLLOWERS only if located snp followers is not yet in database(in leaders or followers):
                        #In case it already exists, create disease union for disease field and add a leader name to a field leader_name
                        if rex_exist:
                            row = cursor.fetchall()[0]
                            curr_entry_id = row[0]
                            l_flag = row[1]
    
                            print "Follower ", curr_snp_name, " already exists, updating..."
                        
                            if l_flag:  # Another leader is in LD (a follower) with the curr_leader_name..get his disease set
                                cursor.execute("SELECT disease, following FROM leaders WHERE snp_id=%s" % curr_entry_id);
                            ### disease(s) and leader(s) that are currently in table FOLLOWERS or LEADERS (!) for a matched follower
                            else:        # Existing follower is the follower of the curr_leader_name..get his disease set
                                cursor.execute("SELECT disease, following FROM followers WHERE snp_id=%s" % curr_entry_id);
                                                    
                            # Disease set for a leader or a follower already in DB, following the curr_leader_name
                            row = cursor.fetchone()
                            disease_old = row[0]
                            following_old = row[1]
                                                
                            # Concatenate a list from a current leader onto a follower, or create a new one if one does not exist
                            if (following_old=='0') or (following_old is None):
                                leader_id_add = str(curr_leader_id)
                            else:
                                leader_id_add = following_old + ',' + str(curr_leader_id)
                                               
                            leader_id_add = leader_id_add.split(',') 
                            new_leader_list = set(leader_id_add);
                            new_leader_list = str( ','.join(str(x) for x in new_leader_list))
                            
                            if l_flag:
                                # Nothing is added here in table leader_diseases, because disease association is not transferable between leaders
                                cursor.execute("UPDATE leaders SET following=%s WHERE snp_id=%s", (new_leader_list, curr_entry_id));
                            else:
                                # Get disease set from curr_leader_name so that it can be combined with previous disease set       
                                cursor.execute("SELECT disease FROM leaders WHERE snp_id=%s" % curr_leader_id);
                                disease_add = cursor.fetchone()[0]
                                disease_list = str(disease_old) + "," + str(disease_add)
                                disease_list = disease_list.split(",")
                                new_disease_list = set(disease_list)
                                new_disease_list = str( ','.join(str(x) for x in new_disease_list))

                                cursor.execute("UPDATE followers SET disease=%s, following=%s WHERE snp_id=%s", (new_disease_list, new_leader_list, curr_entry_id));
                                con.commit()
                                cursor.execute("SELECT id FROM snps WHERE name=%s" % curr_snp_name);
                                curr_snp_id= cursor.fetchone()[0]
                            
                                # For each disease from a new leader (leader of the current block) check whether entry already exists in table follower_diseases for current follower
                                disease_add = disease_add.split(",")

                                for d in disease_add: 
                                    cursor.execute("SELECT count(*) from follower_diseases where snp_id=%s and disease_id=%s" % curr_snp_id, d);
                                    check_id = cursor.fetchone()[0]
                                    if check_id == 0:
                                        #..No entry found for current follower and disease combination..create new entry
                                        cursor.execute("INSERT INTO follower_diseases (snp_id, chr_id, disease_id) VALUES(%s, %s, %s)",(curr_snp_id, chr_id, int(d)));
                                    else:
                                        #..Entry already exists, print a message
                                        print "Disease", str(d), "already exists for this follower SNPs, skipping..."
                                    
                                con.commit()
            
                        else:    # No entries in the DB for a matched follower of a curr_leader_name
                            # Get the list of diseases from curr_leader_name
                            print "New follower SNP", curr_snp_name
                            cursor.execute("SELECT disease FROM leaders WHERE snp_id=%s" % curr_leader_id);
                            row = cursor.fetchall()[0]
                            disease_add = row[0]

                            con.begin()
                            # Set the new id number for new follower snip
                            cursor.execute("SELECT max(id) FROM snps");
                            new_snp_id = cursor.fetchone()[0]
                            if new_snp_id == None:
                                new_snp_id = 1
                            else:
                                new_snp_id += 1
                            # Save everything in tables FOLLOWERS and SNPS
                            cursor.execute("INSERT INTO followers (snp_id, disease, chr_id, chr_pos, following, r2, d, ref, alt, AFR, AMR, ASN, EUR) VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",(new_snp_id, disease_add, chr_id, chr_pos, curr_leader_id, r2, d, ref, alt, AFR, AMR, ASN, EUR));
                            cursor.execute("INSERT INTO snps (id, name, leader) VALUES (%s,%s,%s)",(new_snp_id, curr_snp_name, 0)); 
                            cursor.execute("SELECT disease FROM leaders WHERE snp_id=%s" % curr_leader_id);
                            disease_add = cursor.fetchone()[0]
                            disease_add = disease_add.split(",")

                            # Lastly, save all diseases related to a follower from his new leader
                            for d in disease_add:
                                cursor.execute("INSERT INTO follower_diseases (snp_id, chr_id, disease_id) VALUES(%s, %s, %s)",(new_snp_id, chr_id, int(d)));
                            con.commit()
                            j+=1
                else:
                    follower_flag=0
                    leader_flag=0
                    break

    print "\n\nLeaders:", int(float(k)/2)
    print "New followers:",j
    print "In total:",int(float(k)/2)+j
